/*
	数据类型 常量和变量
	C++能够处理的基本数据类型
		- 整数类型
		- 实数类型
		- 字符类型
		- 布尔类型
	程序中的数据
		- 常量
			- 在源程序中直接写明的数据
			- 其值在整个程序运行期间不可改变
		- 变量
			- 在程序的运行过程中是可以改变的
	整数类型
		- 基本整数类型 ： int
			- int 类型的字节数在C++标准中并没有规定，它是和机器字长相关的
		- 按符号分
			 - 符号的 ( signed )
			 - 无符号的 ( unsigned )
		- 按照数据范围分 (所占字节数不同)
			- 短整数 ( short )
			- 长整数 ( long )
			- 长长整数 ( long long )
		ISO C++并没有明确规定每种数据类型的字节数和取值范围，它只是规定他们之间的字节数大小顺序满足 ： 
		(signed/unsigned) signed char <= (unsigned) short int <= (unsigned) int <= (unsigned) long int <= long long int 
		不同的编译器采用的方案可能不同

		- 字符类型 (char)
			- 容纳单个字符的编码
			- 实质上存储的也是整数
		- 浮点类型
			- 单精度 (float)
			- 双精度 (double)
			- 扩展精度 (long double)
		- 字符串
			- 字符串常量
			- 基本类型中没有字符串变量 (C风格的字符串，即字符数组)  -- 不鼓励使用
			- 在C++的标准库里面有一个string类，我们可以用这个类的对象来存放字符串，在这个类里面提供了很多非常有用的字符串操作功能
		- 布尔类型
			- 只有两个值： true(真)、 false(假)
			- 常用来表示关系比较、相等比较或逻辑运算的结果

		类型名							长度(字节)								取值范围
		bool								1									false、true
		char								1									-128 ~ 127
		signed char							1 									-128 ~ 127
		unsigned char						1 									0 ~ 255
		short(signed short) 				2 									-32768 ~ 32767
		unsigned short 						2 									0 ~ 65535
		int(signed int)						4									-2^31 ~ (2^31)-1
		unsigned int						4									0 ~ (2^32)-1
		long(signed long)					4									-2^31 ~ (2^31)-1
		unsigned long 						4									0 ~ (2^32)-1
		long long							8									-2^63 ~ 2^63-1
		unsigned long long 					8									0 ~ 2^64-1
		float 								4 									绝对值的范围 3.4 * 10^-38  ~ 3.4 * 10^38
		double								8 									绝对值的范围	1.7 * 10 ^-308 ~ 1.7 * 10 ^308
		long double							8 									绝对值的范围 1.7 * 10 ^-308 ~ 1.7 * 10 ^308 
		上表中各类型的长度和取值范围，以面向IA处理器的msvc12 和 2 gcc4.8为准

		- 常量
			- 在程序运行的整个过程中其值始终不可改变的量。
			- 直接使用符号(文字)表示的值
			- 例如:12,3.5, 'A' 都是常量

			- 整数常量 
				- 十进制
				- 八进制
				- 十六进制

				- 以文字形式出现的整数
				- 十进制
					- 若干个0~9的数字，但数字部分不能以0开头，正数前边的正号可以忽略。
				- 八进制
					- 前导0+若干个0~7的数字
				- 十六进制
					- 前导0x + 若干个0 ~ 9 数字以及A~F的字母(大小写均可)
				- 后缀
					- 后缀L(或l)表示类型至少是long
					- 后缀LL(或ll)表示类型是long long
					- 后缀U(或u)表示unsigned类型
			- 浮点类数常量
				- 以文字形式出现的实数
				- 一般形式：例如， 12.5， -34.4E-3
				- 指数形式
					例如， 0.345E+2, -34.4E-3 整数部分和小数部分可以省略其一
				- 浮点常量默认为double型，如果后缀F(或f)可以使其成为float型，例如：12.3f
			
			- 转义字符
			- C 风格字符串常量
				- 一对双引号括起来的字符序列
				- 在内存中按串中字符的排列次序顺序存放，每个字符占一个字节，在末尾添加'\0'作为结尾标记
				例如： "CHINA" CHINA\0
					   "a"   a\0
					   'a'	a
			- 通过添加前缀可以改变字符常量或者字符串常量的类型
					前缀 						含义						  类型
					u 						Unicode 16字符				char16_t
					U 						Unicode 32字符				char32_t
					L 						宽字符					    wchar_t
					u8 						UTF-8(仅用于字符串字面常量) 	char
			- 变量
				- 在程序的运行过程中其值可变的量
			- 变量定义
				- 数据类型
					变量名1, 变量名2,...,变量名n
			- 在定义变量的同时也可以对它初始化
			- C++语言中提供了很多种初始化方式：
				例如：
				 - int a = 0;
				 - int a(0);
				 - int a = {0};
				 - int a{0};
				- 其中使用大括号的初始化方式称为列表初始化，列表初始化时不允许信息的丢失。例如用double值初始化int变量， 就会造成数据丢失。
			- 符号常量
				- 常量定义语句的形式为：
					- const 数据类型说明符 常量名 = 常量值
					- 或数据类型说明符 const 常量名 = 常量值
				- 例如：定义一个代表圆周率的符号常量
					- const PI = 3.141592654
					- 符号常量在定义时一定要初始化，在程序中间，不能改变其值。
*/

/*
	补充：
		- 常量
			在源程序中直接写明的数据，其值在整个程序运行期间不可改变，这样的数据称为常量。
		- 变量
			在运行过程中从计算机的外部设备(例如键盘、硬盘)读取的，这些数据的值在程序运行过程中允许改变，这样的数据称之为变量。
		- 从键盘输入数据
			iostream 类的对象cin的>>操作，可以从标准输入设备(通常是键盘)读入数据
		- 数据存储
			为了存储数据，需要预先为这些数据分配内存空间。
			变量的定义就是在给变量命名的时候分配内存空间。
*/
#include<iostream>
using namespace std;
int main(){
	int radius;
	cout << "Please enter the radius! \n";
	cin >> radius;
	cout <<"This radius is : " << radius << "\n";
	cout << "PI is" << 3.14 << '\n';
	cout << "Please enter a different radius !\n";
	cin >> radius;
	cout << "Now the radius is changed to :"
		<< radius << '\n';
	return 0;
}